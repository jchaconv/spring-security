Repo del curso:
https://github.com/bharaththippireddy/springsecurityfundamentals

:::::::::::::::::::::::::::::
SECCIÓN 3 : THE FUNDAMENTALS
:::::::::::::::::::::::::::::

Authentication: Tener acceso a un app indicando quién soy.
    - Basic
    - Form based
    - OAuth

Authorization: Mediante el concepto de "role" podemos tener acceso
               a ciertas funcionalidades del sistema.


Confidentiality: La data es segura mediante el encrypt/decrypt


CSRF: Cross site request forgery(falsificación) previene que otra app haga submit en nuestro sitio.


CORS: Cross origing resource sharing consiste en la comunicación entre dominios
      diferentes


Signatures: El resource server sabe que el token fue emitido por el Authorization server
            mediante los signatures.


Security Components:

Authentication filter → manager → provider → User details service & Password encoder
La respuesta vuelve al filter y este en caso de éxito deja guardado los datos en un
Security context mediante AuthenticationSuccessHandler o procede al error con un
AuthenticationFailureHandler

********************************************************************

15. Spring Security in action

Se crea el proyecto firs-app con las dependencias:
Spring Web y Spring Security

Run a la aplicación y llamar desde postman a:

http://localhost:8080/hello

Al crear un endpoint simple y ejecutar el proyecto se ve que retorna 401
Se tiene que poner basic auth y el uuid que aparece por defecto en la consola:

Using generated security password: a34492d8-1040-440c-a34f-82f4144d6f41

En postman:
Basic auth -> 
username: user
password: [token]

Responde correctamente

********************************************************************

16. Resending Basic Auth Details

Cuando se envía el request por postman se guarda la cookie JSESSIONID
Es por eso que si quitamos el auth y hacemos el request seguirá respondiendo 200
porque está guardado en memoria la cookie. Interesante.

Borrar la cookie y volver a lanzar el request, ahora retorna 401 unauthorized

********************************************************************

17. Config before and after 3.0

Hay una diferencia considerable en la clase Configuration dependiendo de la versión de spring boot(2 o 3)

********************************************************************

18. Create Custom Security Configuration

Se creó la clase config/MySecurityConfig con el método filterChain

********************************************************************

19. Custom User Details Service

En config/MySecurityConfig se agregaron los métodos:
userDetailsService: Para crear una autenticación con usuario y password
passwordEncoder: Para hacer un encode del password

Al llamar al endpoint http://localhost:8080/hello
Retorna 401 porque las credenciales ya no son validas.
Las cambiamos por las que pusimos en userDetailsService:
user: julio
pass: chacon

Ahora retorna 200 con un basic auth configurado

********************************************************************

21. Create Custom AuthenticationProvider

Se crea config/MyAuthenticationProvider con los métodos:
authenticate: establece el UsernamePasswordAuthenticationToken(manera de autenticarse)
supports: declara el tipo de autenticación

Para probar necesito comentar el método userDetailsService de config/MySecurityConfig
borrar las cookies en postman y probar

Funciona correctamente

********************************************************************

23. Use form based login

Para usar un formulario de login, comentar el método
filterChain de config/MySecurityConfig y agregar la línea:
httpSecurity.formLogin();

Ingresar a http://localhost:8080/hello desde un navegador
y nos aparece una página con un login simple

Funciona correctamente


********************************************************************

24. Few More Methods

Se crea el endpoint /bye
Y con la configuracion creada hasta ahora ambos cargan con el form de login

Solo para permitir autorización en el endpoint /hello:
955736828
Modificar filterChain de config/MySecurityConfig

httpSecurity.authorizeHttpRequests().requestMatchers("/hello").authenticated().anyRequest().denyAll();

La versión corta es:
httpSecurity.authorizeHttpRequests().requestMatchers("/hello").authenticated();

Sucede que requestMatchers recibiendo un String no es reconocido por el IDE

********************************************************************

25. Create custom filter

Crear config/MySecurityFilter y

Agregar en filterChain de config/MySecurityConfig:
httpSecurity.addFilterBefore(new MySecurityFilter(), BasicAuthenticationFilter.class);

Para añadir un filtro en la ejecución del app

********************************************************************

26. Other Filter Classes

Hay otras interfaces con las que se pueden hacer filtros
tienen diferentes implementaciones pero no se revisaron

********************************************************************

:::::::::::::::::::::::::::::::::
SECCIÓN 4 : CREATE MICROSERVICES
:::::::::::::::::::::::::::::::::

Se crea el app coupon-service con las dependencias de maven:
Spring Web
Spring Data JPA
MYSQL Driver

Las dependencias funcionaron bien con:
<version>2.7.10</version> de maven y java11
Hay un error al crear desde spring initialzr, por defecto pone java17

********************************************************************

30. Create model and repository

Se crean las clases:
model/Coupon
repositories/CouponRepository 

31. Create the Rest Controller

Se crea la clase:
controllers/CouponRestController con los métodos:
create y getCoupon pero con una implementación antigua

********************************************************************

32. Configure the DataSource

pom.xml:
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.27</version>
</dependency>

En application.properties:
spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=password

#Opcionales:
#spring.jpa.hibernate.ddl-auto=update
#default_authentication_plugin=mysql_native_password 


Levantar el container:
docker pull mysql
docker run -d --name mysql-container -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=mydatabase mysql:latest

Ejecutar en una consola en el directorio que donde está el script:
docker exec -i 77967784a923 mysql -u root -ppassword mydatabase < tables.sql

Como es gitbash de win10 ejecutar así:
winpty docker exec -it 77967784a923 bash
mysql -u root -ppassword
USE mydatabase;
SHOW TABLES;
SELECT * FROM coupon;

Ejecutar el app y en postman:

http://localhost:8080/coupon/api/coupons
POST
{
    "code":"SUPERSALE",
    "discount":10,
    "expDate":"12/12/2023"
}

Se guarda bien en la bd

http://localhost:8080/coupon/api/coupons/SUPERSALE
GET

Retorna bien la información:
{
    "id": 1,
    "code": "SUPERSALE",
    "discount": 10.00,
    "expDate": "12/12/2023"
}


mysql> SELECT * FROM coupon;
+----+-----------+----------+------------+
| id | code      | discount | exp_date   |
+----+-----------+----------+------------+
|  1 | SUPERSALE |   10.000 | 12/12/2023 |
+----+-----------+----------+------------+


Excelente!

********************************************************************

34. Create the Project Model and Repository

File → New → Module from existing sources

Se crea el app product-service con las dependencias de maven:
- Spring Web
- Spring Data JPA
- MYSQL Driver

Agregar en el properties la config de coupon-service y:
server.port=9090
couponService.url = http://localhost:8080/coupon/api/coupons/

Test en postman (post):
http://localhost:9090/api/v1/product

{
    "name": "Iphone",
    "description": "Iphone 10",
    "price": 15000
}
------
{
    "name": "Laptop",
    "description": "Laptop Dell",
    "price": 25632
}

Se crearon correctamente

mysql> SELECT * FROM product;
+----+--------+-------------+-----------+
| id | name   | description | price     |
+----+--------+-------------+-----------+
|  1 | Iphone | Iphone 10   | 15000.000 |
|  2 | Laptop | Laptop Dell | 25632.000 |
+----+--------+-------------+-----------+


Adicionalmente creé el get de los productos:

http://localhost:9090/api/v1/products

[
    {
        "id": 1,
        "name": "Iphone",
        "description": "Iphone 10",
        "price": 15000.000
    },
    {
        "id": 2,
        "name": "Laptop",
        "description": "Laptop Dell",
        "price": 25632.000
    }
]

******************************************

Integrar ambos microservicios:

-En product-service se agrega en Product:

@Transient   → Para que no tenga impacto en la bd
private String couponCode;
...getter and setter

-Crear /dto/Coupon (Se pegó el contenido de la clase del 
otro servicio pero sin anotaciones)

-Se inyecta el valor de la property en la variable de esta manera:

@Value("${couponService.url}")
private String couponUrl;

-Se hizo una lógica para añadir el descuento en createProduct() invocando
al servicio de cupones con RestTemplate.

-En el ProductServiceApplication se creó el Bean de RestTemplate


Probar en postman(POST):
http://localhost:9090/api/v1/product

Request:

{
    "name": "Monitor",
    "description": "Monitor Lg 27 Pulgadas",
    "price": 840,
    "couponCode": "SUPERSALE"
}

Response:

{
    "id": 3,
    "name": "Monitor",
    "description": "Monitor Lg 27 Pulgadas",
    "price": 830.000,
    "couponCode": "SUPERSALE"
}

Se aplicó correctamente el descuento del cupon

- Se creó el getProductById

Probar en postman(GET):
http://localhost:9090/api/v1/product/3

{
    "id": 3,
    "name": "Monitor",
    "description": "Monitor Lg 27 Pulgadas",
    "price": 830.000,
    "couponCode": null
}

:::::::::::::::::::::::::::::
SECCIÓN 5 : SECURE REST APIs
:::::::::::::::::::::::::::::

Crear tablas en la bd con el script security_tables.sql

Ejecutar en una consola en el directorio que donde está el script:
docker exec -i 77967784a923 mysql -u root -ppassword mydatabase < security_tables.sql

Para acceder al container:
winpty docker exec -it 77967784a923 bash
mysql -u root -ppassword
USE mydatabase;

Comenzamos con coupon-service:

-En el pom.xml agregar:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>

-Agregar:

/model/User → Mapeo de entidades
/model/Role → Implementa Granted Authority para poder usarlo en el userDetail

/repositories/UserRepository → Solo se define el método findByEmail y JPA hace el query
/repositories/RoleRepository

/security/UserDetailServiceImpl → @Service
/security/config/WebSecurityConfig:
    -@Configuration
    -En filterChain() se pone solo authorizeRequests, el path con antMatchers y los roles que pueden acceder
    -Si uso esto: .antMatchers(HttpMethod.GET, "/coupon/api/coupons/**").hasAnyRole("USER", "ADMIN")
     se puede ingresar cualquier couponCode y lo acepta mejor usar regular expressions. Al parecer el antMatchers no reconoce
     la expresión regular {code:^[A-Z]*$}
    -Se deshabilita csrf que viene activo por default

Se probó el GET:
http://localhost:8080/coupon/api/coupons/EXTRASALE
Response:
{
    "timestamp": "2023-06-27T15:46:22.518+00:00",
    "status": 401,
    "error": "Unauthorized",
    "path": "/coupon/api/coupons/EXTRASALE"
}

Poner en authorization → basic auth
username: doug@bailey.com
password: doug

Hacer lo mismo para el create-coupon
Borrar la cookie y ver que sale error si no se mandan las credenciales
Es un falso positivo.

*Se logró poner basic auth a los endpoints de product-service:

.antMatchers(HttpMethod.GET, "/api/v1/product/**").hasAnyRole("USER", "ADMIN")
.antMatchers(HttpMethod.GET, "/api/v1/products").hasAnyRole("USER", "ADMIN")
.antMatchers(HttpMethod.POST, "/api/v1/product").hasRole("ADMIN")

En el ProductController tuve que enviar el basic auth para la invocación del coupon-service

:::::::::::::::::::::::::::::
SECCIÓN 6 : SECURE A WEBAPP
:::::::::::::::::::::::::::::

En coupon-service:

- Agregar la dependency en el pom.xml:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>

-Pegar los html's en /resources/templates

-Pegar el CouponController que llama a los html's

-Se modificó el WebSecurityConfig para poder invocar al path base /
y también para tener un formLogin, entre otros(paths del controller)

Se hicieron las pruebas en localhost:8080 y se puede ingresar al login
y hacer creación y get de coupon

******************************************

Custom Login:

-Crear:
/security/SecurityService
/security/SecurityServiceImpl

-Modificar:
/security/config/WebSecurityConfig

- Pegar login.html

-Crear UserController
******************************************
Save Security Context

-Modificar WebSecurityConfig → Se actualizó a 3.0.8 la versión de Spring Boot en
el pom para que reconozca la clase DelegatingSecurityContextRepository
-Además se tuvo que actualizar a authorizeHttpRequests y requestMatchers

-Modificar:
*SecurityService
*SecurityServiceImpl
*UserController → son inyectados autom. el request y response

******************************************
Para testear, modificar el WebSecurityConfig
quitar el formLogin y agregar el permitAll para / y /login
faltó probar!
******************************************
Logout:
Agregar .and().logout().logoutSuccessUrl("/") en WebSecurityConfig
También se puede usar así en caso se necesite:
.and().logout().logoutSuccessUrl("/").deleteCookies()
.and().logout().logoutSuccessUrl("/").clearAuthentication(true)
******************************************
Implement User Registration
Pegar en templates el archivo registerUser.html
Agregar cambios en UserController
*Al agregar el encoder autom. reconoce el encoder que tenemos en WebSecurityConfig
*Agregar paths a WebSecurityConfig

Se crean los usuarios pero no tienen asignado un rol. Se debe usar Hashset para añadir lógica
faltó probar!

:::::::::::::::::
SECCIÓN 7 : CSRF
:::::::::::::::::
Cross Site Request Forgery
Entrar a Create Coupon:
View page source, todo normal en el form

Quitar el csrf().disable(); de WebSecurityConfig
eso es todo.

Al darle de nuevo a View page source se ve:
name="_csrf" value="token"
La idea es que spring security permite los submits cuando se encuentran estos tokens

Para hacer logout se usa el botón del form porque solo ahí Spring Security puede enviar el token
y no en <a>...</a>
******************************************

Use Custom Configuration
Se usó esta config para ignorar csrf en algunos paths

httpSecurity.csrf(csrfCustomizer -> {
    csrfCustomizer.ignoringRequestMatchers("/coupon/api/coupons/**");
    RequestMatcher requestMatchers = new RegexRequestMatcher("/coupon/api/coupons/**", "POST");
    requestMatchers = new MvcRequestMatcher(new HandlerMappingIntrospector(), "/getCoupon");
    csrfCustomizer.ignoringRequestMatchers(requestMatchers);
});

******************************************


******************************************

******************************************


******************************************






























